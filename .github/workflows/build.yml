name: Build Container
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ghcr.io/randomairborne/tunnelbana

permissions:
  packages: write
  contents: read

jobs:
  check:
    uses: ./.github/workflows/check.yml

  build:
    needs: [check]
    runs-on: ${{ matrix.platform.gha-image }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - docker: linux/amd64
            gha-image: ubuntu-24.04
            slug: x86_64
          - docker: linux/arm64
            gha-image: ubuntu-24.04-arm
            slug: aarch64
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform.docker }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform.slug }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:latest $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)


  build-debs:
    needs: [check]
    runs-on: ${{ matrix.platform.gha-image }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - slug: amd64
            gha-image: ubuntu-24.04
          - slug: arm64
            gha-image: ubuntu-24.04-arm
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install cargo
        uses: dtolnay/rust-toolchain@stable

      - name: Install apt dependencies
        run: sudo apt-get install jq dpkg-dev

      - name: Prepare cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.slug }}

      - name: Build binary
        run: cargo b --release

      - name: Generate deb templates
        run: ci/debpkg.sh ${{ matrix.platform.slug }}

      - name: Package debfiles
        run: dpkg --build target/deb/*

      - name: Upload debfile
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.platform.slug }}
          path: target/deb/*.deb

  publish-debs:
    needs: [build-debs]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install apt dependencies
        run: sudo apt-get install dpkg-dev gpg

      - name: Install s3 CLI
        run: sudo snap install aws-cli --classic

      - name: Download debfiles
        uses: actions/download-artifact@v4
        with:
          pattern: deb-*
          merge-multiple: true

      - name: Import private keys
        run: echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import

      - name: Sign and prepare apt repo
        run: ./ci/signify.sh *.deb

      - name: Publish
        run: aws s3 sync apt-repo/tunnelbana/ s3://apt-repos/tunnelbana/
        env:
          AWS_ENDPOINT_URL: https://${{ secrets.S3_ACCOUNT_ID }}.r2.cloudflarestorage.com/
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
